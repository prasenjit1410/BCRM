/*
  This First example (Scenario 1 ) depicts that how using map on result is not enough if we want to keep original result as it is and want to get a new modifed result, 
  if any modification done on the outcome/result
*/

import { LightningElement, track, api, wire } from 'lwc';
import getAccountdatas from '@salesforce/apex/AccountDatas.getAccountdatas';

// Scenario 1:  so here the new uniqueid properties added to the result, which is incorrect  
export default class AccountDatas extends LightningElement {
    displayMessahe = true ;
    richTextMessage = '<h2> Welcome, currently Account datas not displaying on the screen, ' + 
     'but in console log, you can find all data, this page is built for a research purpose </h2>';

     connectedCallback(){
        getAccountdatas()
        .then( (result)=>{
            console.log( 'response is ' , result );

            let accresult = result.map( item=>{
                let eachobj = item; // Assigning item to eachobj
                eachobj.uniqueid = 'accoubt-id-1';
                return eachobj ;
            });

            console.log( 'result is ', result ); //  {Id: '0010I00001p579fQAA', Type1__c: 'SA55', Type2__c: 'SA56', uniqueid: 'accoubt-id-1'}
            console.log( 'account result is ', accresult ); //  {Id: '0010I00001p579fQAA', Type1__c: 'SA55', Type2__c: 'SA56', uniqueid: 'accoubt-id-1'}
        })
        .catch( (error)=>{
            console.log( 'Error is====>' , error );
        })

     }
}

// Scenario 2: so here the new uniqueid properties added to the accresult, but not modifying the result variable, which is correct
// use of spread operator

export default class AccountDatas extends LightningElement {
    displayMessahe = true ;
    richTextMessage = '<h2> Welcome, currently Account datas not displaying on the screen, ' + 
     'but in console log, you can find all data, this page is built for a research purpose </h2>';

     connectedCallback(){
        getAccountdatas()
        .then( (result)=>{
            console.log( 'response is ' , result );

            let accresult = result.map( item=>{
                let eachobj = {...item};
                eachobj.uniqueid = 'accoubt-id-1';
                return eachobj ;
            });

            console.log( 'result is ', result ); //  {Id: '0010I00001p579fQAA', Type1__c: 'SA55', Type2__c: 'SA56' }
            console.log( 'account result is ', accresult ); //  {Id: '0010I00001p579fQAA', Type1__c: 'SA55', Type2__c: 'SA56', uniqueid: 'accoubt-id-1'}
        })
        .catch( (error)=>{
            console.log( 'Error is====>' , error );
        })

     }
}
// Scenario 3: so here the new uniqueid properties added to the accresult, but not modifying the result variable, which is correct
// use of Object.assign({}, item )

export default class AccountDatas extends LightningElement {
    displayMessahe = true ;
    richTextMessage = '<h2> Welcome, currently Account datas not displaying on the screen, ' + 
     'but in console log, you can find all data, this page is built for a research purpose </h2>';

     connectedCallback(){
        getAccountdatas()
        .then( (result)=>{
            console.log( 'response is ' , result );

            let accresult = result.map( item=>{
                let eachobj = Object.assign( {}, item );
                eachobj.uniqueid = 'accoubt-id-1';
                return eachobj ;
            });

            console.log( 'result is ', result ); //  {Id: '0010I00001p579fQAA', Type1__c: 'SA55', Type2__c: 'SA56' }
            console.log( 'account result is ', accresult ); //  {Id: '0010I00001p579fQAA', Type1__c: 'SA55', Type2__c: 'SA56', uniqueid: 'accoubt-id-1'}
        })
        .catch( (error)=>{
            console.log( 'Error is====>' , error );
        })

     }
}
